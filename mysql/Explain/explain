Q1: What do different columns in the output of EXPLAIN mean? What possible values can those have? What is the meaning of those values?

ANS: -
1) id: A sequential number of the SELECT query this row belongs to
2) select_type: The type of SELECT query
3) table: The table name or alias the row refers to
4) type: Defines how the tables are accessed or joined. Possible Values are ALL, index, range, ref, eq_ref, const, system.
5) possible_keys: The optional indexes to choose from
6) key: The index actually chosen. Can choose only part of the index.
7) key_len: The length of the chosen key in bytes
8) rows: Estimation of rows to be examined, to execute the query.
9) filtered: Amount of rows unfiltered by the conitions in the WHERE clause.
10) extra: Additional information regarding query processing.

Q2: We use EXPLAIN to optimize slow SQL queries used in our application. Lets say we have a comments table in our application that has a foreign key, user_id, referencing to users table. EXPLAINing the query that finds all the comments made by a user gives us following result.

mysql> EXPLAIN SELECT * FROM comments WHERE user_id = 41;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1002345 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

mysql> SELECT count(id) FROM comments;

+-----------+
| count(id) |
+-----------+
| 1002345 |
+-----------+

2.1 The value under 'rows' column in the output of EXPLAIN query and SELECT query after it are same. What does it mean?

ANS:- 
The 'rows' column indicates the number of rows MySQL believes it must examine to execute the query and in this particular case the user_id column is not indexed so it searches for the user_id of 41 throughout the table searching in every row thereby explaining the number '1002345' which is the actual number of rows in the table.

2.2 Is the SELECT query optimal? If no, how do we optimize it?

ANS:-
No the query is not optimal. It can be optimized by adding an index to the user_Id column-- ALTER TABLE comments ADD INDEX(user_id);

Q3: In Rails world, we have someting called polymorphic associations (http://guides.rubyonrails.org/association_basics.html#polymorphic-associations). Lets say in our web application, we can let users comment on photographs and articles. Some of rows in comments table are represented as following:

mysql> SELECT * FROM comments LIMIT 5;

+----+------------------+----------------+---------+
| id | commentable_type | commentable_id | user_id |
+----+------------------+----------------+---------+
| 1 + Article | 1 | 1 |
+----+------------------+----------------+---------+
| 2 + Photo | 1 | 1 |
+----+------------------+----------------+---------+
| 3 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 4 + Photo | 2 | 2 |
+----+------------------+----------------+---------+
| 5 + Article | 1 | 2 |
+----+------------------+----------------+---------+

When we need to fetch comments of a user on a particular Article or Photo we form a query like:

mysql> EXPLAIN SELECT * FROM comments WHERE commentable_id = 1 AND commentable_type = 'Article' AND user_id = 1;

+-------------+------+---------------+---------+-------+---------+-------------+
| select_type | type | key | key_len | ref | rows | Extra |
+-------------+------+---------------+---------+-------+---------+-------------+
| SIMPLE | ALL | NULL | NULL | NULL | 1000025 | Using where |
+-------------+------+---------------+---------+-------+---------+-------------+

It seems that we do not have any index on any of the columns. And whole comments table is scanned to fetch those comments.

3.1 We decide to index columns in comments table to optimize the SELECT query. What column(s) will you index in which order? Ask the exercise creator for a hint if you are confused.

ANS:-
Following are the columns as per my interpretation-
id- unique id to each comment,
commentable_type- article/photo,
commentable_id-	1/2; if commentable yes/no,
user_id- the unique id of the user who has commented

The columns commentable_type, commentable_id and user_id should all be indexed. This can be done by-
ALTER TABLE comments ADD INDEX(user_id, commentable_id, commentable_type);

The above order is used because-
1. Providing user_id as the first preference, will filter all the records with the user_id, whereas other columns will simply filter half of the results.
2. Providing commentable_id as the second preference, will filter the records as commentable or not, and if they are not commentable then there is no point in finding out the commentable_type.
3. If the record is commentable then we can search for the commentable_type.

4.1 EXPLAIN a SELECT query against one of your databases which employs an INNER JOIN between two tables. What does the output look like? What does the values under different columns mean? Do you get only one row in EXPLAIN's output?
answer-

ANS:-
The two rows from the two tables t1 and t2 which are joined--
+----+-------------+-------+------+---------------+------+---------+------+------+--------------------------------+
| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra                          |
+----+-------------+-------+------+---------------+------+---------+------+------+--------------------------------+
|  1 | SIMPLE      | t1    | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using where; Using temporary   |
|  1 | SIMPLE      | t2    | ALL  | NULL          | NULL | NULL    | NULL |   10 | Using where                    |
+----+-------------+-------+------+---------------+------+---------+------+------+--------------------------------+


1. id = 1 : In both the rows is the sequential number of the SELECT within the query which is 1 as there is no subquery.
2. select_type = SIMPLE : In both the rows, as there as no UNIONs or subqueries involved.
3. table : table name for each table.
4. type = ALL :	A full table scan is done for both the tables as no indexing is done.
5. possible_keys = NULL :	Indicates that there are no indexes MySQL can choose from to use to find the rows in this table.
6. key = NULL : Indicates the key (index) that MySQL actually decided to use which is null in this case.
7. key_len= NULL : NULL as there is no key.
8. rows: The rows column indicates the number of rows MySQL believes it must examine to execute the query. Which is the total number of records as no index is provided. So 5 and 10 in table t1 and t2 respectively
9. extra : row1	using where- A WHERE clause is used to restrict which rows to match against the next table.
				using tempory- To resolve the query, MySQL needs to create a temporary table to hold the result. In most cases, it will indicate that one of the ORDER BY or GROUP BY clauses is executed without using an index
   extra : row2	using where- A WHERE clause is used to restrict which rows to match against the next table.


4.2 Form the same select query in above question using a subquery instead of a JOIN. What does the EXPLAIN output look like now? Which query is better and why?

ANS:-
+----+--------------------+-------+------+---------------+------+---------+------+------+------------------------------+
| id | select_type        | table | type | possible_keys | key  | key_len | ref  | rows | Extra                        |
+----+--------------------+-------+------+---------------+------+---------+------+------+------------------------------+
|  1 | PRIMARY            | t1    | ALL  | NULL          | NULL | NULL    | NULL |   10 | Using where; Using temporary |
|  2 | DEPENDENT SUBQUERY | t2    | ALL  | NULL          | NULL | NULL    | NULL |    5 | Using where                  |
+----+--------------------+-------+------+---------------+------+---------+------+------+------------------------------+
the follwing difference is seen-
1. id : Primary query has an id of 1 and the subquery of 2.
2. select_type : Primary query has a type of PRIMARY and subquery of DEPENDENT SUBQUERY.

In this particular case:
- if the joining columns are given an index then, A JOIN is better than SUBQUERY, because SUBQUERY runs once for every row whereas the JOIN happens on indexes.
- However, SUBQUERY is faster when we have to retrieve data from large number of tables. Because it becomes tedious to JOIN more tables. JOIN is faster to retrieve data from database when we have less number of tables.






